{"ast":null,"code":"import { db } from \"../firebase/firebaseConfig\";\nimport { loadNotes } from \"../helpers/loadNotes\";\nimport { types } from \"../types/types\";\nexport const startNewNotes = (title, body) => {\n  return async (dispatch, getState) => {\n    const {\n      uid\n    } = getState().auth;\n    const newNote = {\n      title: title,\n      body: body,\n      date: new Date().getTime()\n    };\n    console.log(uid);\n    const doc = await db.collection(`${uid}/journal/notes`).add(newNote);\n    console.log(doc);\n    dispatch(activeNote(doc.id, newNote));\n    dispatch(addNewNote(doc.id, newNote));\n  };\n};\nexport const activeNote = (id, note) => ({\n  type: types.notesActive,\n  payload: {\n    id,\n    ...note\n  }\n});\nexport const addNewNote = (id, note) => ({\n  type: types.notesAddNew,\n  payload: {\n    id,\n    ...note\n  }\n});\nexport const startSaveNote = note => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        uid\n      } = getState().auth;\n      const noteToFireStore = { ...note\n      };\n      delete noteToFireStore.id;\n      await db.doc(`${uid}/journal/notes/${note.id}`).update(noteToFireStore);\n      console.log('note', note.id);\n      dispatch(refreshNotes(note.id, noteToFireStore)); //Swal.fire('Saved', note.title, 'success');\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\nexport const refreshNotes = (id, note) => ({\n  type: types.notesUpdated,\n  payload: {\n    id,\n    note: {\n      id,\n      ...note\n    }\n  }\n});\nexport const startLoadingNotes = uid => {\n  return async dispatch => {\n    const notes = await loadNotes(uid);\n    dispatch(setNotes(notes));\n  };\n};\nexport const setNotes = notes => ({\n  type: types.notesLoad,\n  payload: notes\n});","map":{"version":3,"sources":["C:/Users/Asus/Desktop/Proyecto Note/Notas proyecto/src/actions/notes.js"],"names":["db","loadNotes","types","startNewNotes","title","body","dispatch","getState","uid","auth","newNote","date","Date","getTime","console","log","doc","collection","add","activeNote","id","addNewNote","note","type","notesActive","payload","notesAddNew","startSaveNote","noteToFireStore","update","refreshNotes","err","notesUpdated","startLoadingNotes","notes","setNotes","notesLoad"],"mappings":"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","sourcesContent":["import { db } from \"../firebase/firebaseConfig\";\r\nimport { loadNotes } from \"../helpers/loadNotes\";\r\nimport { types } from \"../types/types\";\r\nexport const startNewNotes = (title,body) => {\r\n    return async (dispatch, getState) => {\r\n\r\n        const { uid } = getState().auth;\r\n        const newNote = {\r\n            title: title,\r\n            body: body,\r\n            date: new Date().getTime()\r\n        }\r\n\r\n        console.log(uid);\r\n        const doc = await db.collection(`${uid}/journal/notes`).add(newNote);\r\n        console.log(doc);\r\n        dispatch(activeNote(doc.id, newNote));\r\n        dispatch(addNewNote(doc.id, newNote));\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const activeNote = (id, note) => ({\r\n\r\n    type: types.notesActive,\r\n    payload: {\r\n        id,\r\n        ...note\r\n    }\r\n\r\n\r\n\r\n});\r\n\r\nexport const addNewNote = (id, note) => ({\r\n\r\n    type: types.notesAddNew,\r\n    payload: {\r\n        id, ...note\r\n    }\r\n\r\n})\r\n\r\nexport const startSaveNote = (note) => {\r\n\r\n    return async (dispatch, getState) => {\r\n\r\n        try {\r\n\r\n            const { uid } = getState().auth;\r\n\r\n            const noteToFireStore = { ...note };\r\n            delete noteToFireStore.id;\r\n\r\n            await db.doc(`${uid}/journal/notes/${note.id}`).update(noteToFireStore);\r\n\r\n\r\n            console.log('note',note.id)\r\n            dispatch(refreshNotes(note.id, noteToFireStore));\r\n\r\n            //Swal.fire('Saved', note.title, 'success');\r\n\r\n        } catch (err) {\r\n\r\n            console.log(err)\r\n        }\r\n\r\n\r\n    }\r\n}\r\nexport const refreshNotes = (id, note) => ({\r\n\r\n    type: types.notesUpdated,\r\n    payload: {\r\n        id,\r\n        note: {\r\n            id,\r\n            ...note\r\n        }\r\n    }\r\n\r\n});\r\n\r\nexport const startLoadingNotes = (uid) => {\r\n    return async (dispatch) => {\r\n\r\n        const notes = await loadNotes(uid);\r\n        dispatch(setNotes(notes));\r\n    }\r\n}\r\n\r\nexport const setNotes = (notes) => ({\r\n\r\n\r\n    type: types.notesLoad,\r\n    payload: notes\r\n\r\n\r\n\r\n});"]},"metadata":{},"sourceType":"module"}