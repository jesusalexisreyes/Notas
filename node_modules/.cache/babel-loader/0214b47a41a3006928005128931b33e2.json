{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\Proyecto Note\\\\Notas proyecto\\\\src\\\\routers\\\\AppRouter.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { PrivateRoute } from \"./PrivateRouter\";\nimport { firebase } from \"../firebase/firebaseConfig\";\nimport { AuthRouter } from \"./AuthRouter\";\nimport Dashboard from \"../views/Dashboard\";\nimport { login } from \"../actions/auth\";\nimport { startLoadingNotes } from \"../actions/notes\";\nimport { PublicRoute } from \"./PublicRouter\";\nimport Cargando from \"../components/Cargando\";\nimport Error from \"../views/Error\";\nexport const AppRouter = () => {\n  const dispatch = useDispatch();\n  const [checking, setChecking] = useState(true);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(async user => {\n      if (user === null || user === void 0 ? void 0 : user.uid) {\n        dispatch(login(user.uid, user.displayName));\n        setIsLoggedIn(true);\n        dispatch(startLoadingNotes(user.uid));\n      } else {\n        setIsLoggedIn(false);\n      }\n\n      setChecking(false);\n    });\n  }, [dispatch, setChecking, setIsLoggedIn]);\n\n  if (checking) {\n    return /*#__PURE__*/React.createElement(Cargando, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PublicRoute, {\n    path: \"/auth\",\n    isAuthenticated: isLoggedIn,\n    component: AuthRouter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(PrivateRoute, {\n    exact: true,\n    isAuthenticated: isLoggedIn,\n    path: \"/\",\n    component: Dashboard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"*\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Error, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }))));\n};","map":{"version":3,"sources":["C:/Users/Asus/Desktop/Proyecto Note/Notas proyecto/src/routers/AppRouter.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Route","useDispatch","PrivateRoute","firebase","AuthRouter","Dashboard","login","startLoadingNotes","PublicRoute","Cargando","Error","AppRouter","dispatch","checking","setChecking","isLoggedIn","setIsLoggedIn","auth","onAuthStateChanged","user","uid","displayName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;AAEA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,QAAT,QAAyB,4BAAzB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AAEA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACmB,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAAC,KAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAACc,IAAT,GAAgBC,kBAAhB,CAAmC,MAAOC,IAAP,IAAgB;AACjD,UAAIA,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEC,GAAV,EAAe;AACbR,QAAAA,QAAQ,CAACN,KAAK,CAACa,IAAI,CAACC,GAAN,EAAWD,IAAI,CAACE,WAAhB,CAAN,CAAR;AACAL,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAJ,QAAAA,QAAQ,CAACL,iBAAiB,CAACY,IAAI,CAACC,GAAN,CAAlB,CAAR;AACD,OAJD,MAIO;AACLJ,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD;;AACDF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD,KATD;AAUD,GAXQ,EAWN,CAACF,QAAD,EAAWE,WAAX,EAAwBE,aAAxB,CAXM,CAAT;;AAaA,MAAIH,QAAJ,EAAc;AACZ,wBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAED,sBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,eAAe,EAAEE,UAFnB;AAGE,IAAA,SAAS,EAAEX,UAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE,oBAAC,YAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,eAAe,EAAEW,UAFnB;AAGE,IAAA,IAAI,EAAC,GAHP;AAIE,IAAA,SAAS,EAAEV,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAcE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAdF,CADF,CADF;AAsBD,CA/CM","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { PrivateRoute } from \"./PrivateRouter\";\r\nimport { firebase } from \"../firebase/firebaseConfig\";\r\nimport { AuthRouter } from \"./AuthRouter\";\r\nimport Dashboard from \"../views/Dashboard\";\r\nimport { login } from \"../actions/auth\";\r\nimport { startLoadingNotes } from \"../actions/notes\";\r\nimport { PublicRoute } from \"./PublicRouter\";\r\nimport Cargando from \"../components/Cargando\";\r\nimport Error from \"../views/Error\";\r\n\r\n\r\nexport const AppRouter = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [checking, setChecking] = useState(true);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    firebase.auth().onAuthStateChanged(async (user) => {\r\n      if (user?.uid) {\r\n        dispatch(login(user.uid, user.displayName));\r\n        setIsLoggedIn(true);\r\n        dispatch(startLoadingNotes(user.uid));\r\n      } else {\r\n        setIsLoggedIn(false);\r\n      }\r\n      setChecking(false);\r\n    });\r\n  }, [dispatch, setChecking, setIsLoggedIn]);\r\n\r\n  if (checking) {\r\n    return (\r\n      <Cargando/>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <PublicRoute\r\n          path=\"/auth\"\r\n          isAuthenticated={isLoggedIn}\r\n          component={AuthRouter}\r\n        />\r\n\r\n        <PrivateRoute\r\n          exact\r\n          isAuthenticated={isLoggedIn}\r\n          path=\"/\"\r\n          component={Dashboard}\r\n        />\r\n\r\n        <Route path=\"*\">\r\n          <Error />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}