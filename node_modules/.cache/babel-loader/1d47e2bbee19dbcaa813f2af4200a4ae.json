{"ast":null,"code":"import { types } from \"../types/types\";\nimport { firebase, googleAuthProvider } from \"../firebase/firebaseConfig\";\nimport Swal from \"sweetalert2\";\nexport const startLoginEmailPassword = async (email, password) => {\n  try {\n    const response = await firebase.auth().signInWithEmailAndPassword(email, password);\n    return {\n      status: true,\n      uid: response.user.uid,\n      name: response.user.displayName\n    };\n  } catch (err) {\n    return {\n      status: false,\n      messagge: err.message\n    };\n  }\n};\nexport const startRegisterWithEmailPasswordName = (email, password, name) => {\n  return dispatch => {\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(async ({\n      user\n    }) => {\n      await user.updateProfile({\n        displayName: name\n      });\n      dispatch(login(user.uid, user.displayName));\n    }).catch(e => {\n      console.log(e);\n      Swal.fire(\"Error\", e.message, \"error\");\n    });\n  };\n};\nexport const startGoogleLogin = () => {\n  return dispatch => {\n    firebase.auth().signInWithPopup(googleAuthProvider).then(({\n      user\n    }) => {\n      dispatch(login(user.uid, user.displayName));\n    });\n  };\n};\nexport const login = (uid, displayName) => {\n  return {\n    type: types.login,\n    payload: {\n      uid,\n      displayName\n    }\n  };\n};\nexport const startLogout = () => {\n  return async dispatch => {\n    await firebase.auth().signOut();\n    dispatch(logout());\n  };\n};\nexport const logout = () => ({\n  type: types.logout\n});","map":{"version":3,"sources":["C:/Users/Asus/Desktop/Proyecto Note/Notas proyecto/src/actions/auth.js"],"names":["types","firebase","googleAuthProvider","Swal","startLoginEmailPassword","email","password","response","auth","signInWithEmailAndPassword","status","uid","user","name","displayName","err","messagge","message","startRegisterWithEmailPasswordName","dispatch","createUserWithEmailAndPassword","then","updateProfile","login","catch","e","console","log","fire","startGoogleLogin","signInWithPopup","type","payload","startLogout","signOut","logout"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,QAAT,EAAmBC,kBAAnB,QAA6C,4BAA7C;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,OAAO,MAAMC,uBAAuB,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AAChE,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAC5BO,IADoB,GAEpBC,0BAFoB,CAEOJ,KAFP,EAEcC,QAFd,CAAvB;AAGA,WAAO;AACLI,MAAAA,MAAM,EAAE,IADH;AAELC,MAAAA,GAAG,EAAEJ,QAAQ,CAACK,IAAT,CAAcD,GAFd;AAGLE,MAAAA,IAAI,EAAEN,QAAQ,CAACK,IAAT,CAAcE;AAHf,KAAP;AAMD,GAVD,CAUE,OAAOC,GAAP,EAAY;AACZ,WAAO;AACLL,MAAAA,MAAM,EAAE,KADH;AAELM,MAAAA,QAAQ,EAAED,GAAG,CAACE;AAFT,KAAP;AAID;AACF,CAjBM;AAmBP,OAAO,MAAMC,kCAAkC,GAAG,CAACb,KAAD,EAAQC,QAAR,EAAkBO,IAAlB,KAA2B;AAC3E,SAAQM,QAAD,IAAc;AACnBlB,IAAAA,QAAQ,CACLO,IADH,GAEGY,8BAFH,CAEkCf,KAFlC,EAEyCC,QAFzC,EAGGe,IAHH,CAGQ,OAAO;AAAET,MAAAA;AAAF,KAAP,KAAoB;AACxB,YAAMA,IAAI,CAACU,aAAL,CAAmB;AAAER,QAAAA,WAAW,EAAED;AAAf,OAAnB,CAAN;AACAM,MAAAA,QAAQ,CAACI,KAAK,CAACX,IAAI,CAACD,GAAN,EAAWC,IAAI,CAACE,WAAhB,CAAN,CAAR;AACD,KANH,EAOGU,KAPH,CAOUC,CAAD,IAAO;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAtB,MAAAA,IAAI,CAACyB,IAAL,CAAU,OAAV,EAAmBH,CAAC,CAACR,OAArB,EAA8B,OAA9B;AACD,KAVH;AAWD,GAZD;AAaD,CAdM;AAgBP,OAAO,MAAMY,gBAAgB,GAAG,MAAM;AACpC,SAAQV,QAAD,IAAc;AACnBlB,IAAAA,QAAQ,CACLO,IADH,GAEGsB,eAFH,CAEmB5B,kBAFnB,EAGGmB,IAHH,CAGQ,CAAC;AAAET,MAAAA;AAAF,KAAD,KAAc;AAClBO,MAAAA,QAAQ,CAACI,KAAK,CAACX,IAAI,CAACD,GAAN,EAAWC,IAAI,CAACE,WAAhB,CAAN,CAAR;AACD,KALH;AAMD,GAPD;AAQD,CATM;AAWP,OAAO,MAAMS,KAAK,GAAG,CAACZ,GAAD,EAAMG,WAAN,KAAsB;AAEzC,SAAO;AACLiB,IAAAA,IAAI,EAAE/B,KAAK,CAACuB,KADP;AAELS,IAAAA,OAAO,EAAE;AACPrB,MAAAA,GADO;AAEPG,MAAAA;AAFO;AAFJ,GAAP;AAQD,CAVM;AAYP,OAAO,MAAMmB,WAAW,GAAG,MAAM;AAC/B,SAAO,MAAOd,QAAP,IAAoB;AACzB,UAAMlB,QAAQ,CAACO,IAAT,GAAgB0B,OAAhB,EAAN;AACAf,IAAAA,QAAQ,CAACgB,MAAM,EAAP,CAAR;AACD,GAHD;AAID,CALM;AAOP,OAAO,MAAMA,MAAM,GAAG,OAAO;AAC3BJ,EAAAA,IAAI,EAAE/B,KAAK,CAACmC;AADe,CAAP,CAAf","sourcesContent":["import { types } from \"../types/types\";\r\nimport { firebase, googleAuthProvider } from \"../firebase/firebaseConfig\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nexport const startLoginEmailPassword = async (email, password) => {\r\n  try {\r\n    const response = await firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, password);\r\n    return {\r\n      status: true,\r\n      uid: response.user.uid,\r\n      name: response.user.displayName\r\n\r\n    };\r\n  } catch (err) {\r\n    return {\r\n      status: false,\r\n      messagge: err.message,\r\n    };\r\n  }\r\n};\r\n\r\nexport const startRegisterWithEmailPasswordName = (email, password, name) => {\r\n  return (dispatch) => {\r\n    firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then(async ({ user }) => {\r\n        await user.updateProfile({ displayName: name })\r\n        dispatch(login(user.uid, user.displayName));\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n        Swal.fire(\"Error\", e.message, \"error\");\r\n      });\r\n  };\r\n};\r\n\r\nexport const startGoogleLogin = () => {\r\n  return (dispatch) => {\r\n    firebase\r\n      .auth()\r\n      .signInWithPopup(googleAuthProvider)\r\n      .then(({ user }) => {\r\n        dispatch(login(user.uid, user.displayName));\r\n      });\r\n  };\r\n};\r\n\r\nexport const login = (uid, displayName) => {\r\n\r\n  return {\r\n    type: types.login,\r\n    payload: {\r\n      uid,\r\n      displayName\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport const startLogout = () => {\r\n  return async (dispatch) => {\r\n    await firebase.auth().signOut();\r\n    dispatch(logout());\r\n  };\r\n};\r\n\r\nexport const logout = () => ({\r\n  type: types.logout,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}